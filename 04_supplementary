# Load packages
pacman::p_load("dplyr", "ggplot2", "tidyr",
               "rgdal", "ggpubr", "sf", "raster",
               "cowplot", "scales", "gridExtra",
               "reshape2", "ggannotate", "viridis",
               "biscale", "malariaAtlas", "forcats")

venezuela <- rgdal::readOGR("data/ven_shp", "Parroquias_Venezuela")
bolivar   <- subset(venezuela, venezuela$ESTADO == "Bolívar")

############################################################

## Fig. S1

############################################################

# Forest loss heatmap
data <- read.csv("data/land_use/forest_decrease/data.csv") %>%
  subset(Year > 1995 & Year < 2017) %>%
  dplyr::select(Year, Parroquia, Municipio,
                forest_decrease_annual) %>%
  dplyr::rename(forest_loss = forest_decrease_annual)

# Sort data by highest API
cases <- read.csv("data/inla_input/data.csv") %>% dplyr::select(Year, Municipio, Parroquia, PF, PV, Population) %>%
  group_by(Year, Municipio, Parroquia) %>%
  dplyr::summarise(pf = sum(PF, na.rm = TRUE),
                   pv = sum(PV, na.rm = TRUE),
                   Population = mean(Population, na.rm = TRUE)) %>%
  dplyr::group_by(Municipio, Parroquia) %>%
  dplyr::summarise(pf = sum(pf, na.rm = TRUE),
                   pv = sum(pv, na.rm = TRUE),
                   Population = mean(Population, na.rm = TRUE)) %>%
  mutate(API_pf = pf * 1000/Population,
         API_pv = pv * 1000/Population) 

data <- merge(data, cases, by = c("Parroquia", "Municipio"), all = TRUE)

# Sort df
data <- data %>% dplyr::group_by(Year, Parroquia, Municipio) %>% 
  arrange(API_pv)

# Rename Dalla Costa parroquias (two municipalities)
data$Parroquia[data$Municipio == "Sifontes" & data$Parroquia == "Dalla Costa"] <- "Dalla Costa*"
data$Parroquia[data$Municipio == "Caroní" & data$Parroquia == "Dalla Costa"] <- "Dalla Costa†"

# Log and replace NA
data <- data %>% mutate(forest_loss = log(forest_loss)+1) %>%
  mutate(forest_loss = replace_na(forest_loss, 0))

data$forest_loss[data$forest_loss == "-Inf"] <- 0

forest_loss <- 
  ggplot(data, aes(Year, Parroquia)) + geom_tile(aes(fill = forest_loss), 
                                                 colour = "white") +
  xlab("Time") + ylab(c(expression(paste("Increasing API") %->% paste("")))) +
  scale_fill_gradient(low = "#d8e1cf", high = "#438484",
                      name = expression(atop("",
                                             atop(textstyle("Forest loss"),
                                                  atop(textstyle("(log+1"),
                                                       atop(textstyle("k"*m^2*" "*year^-1*")")))))),
                      guide = guide_colourbar(ticks = FALSE,
                                              limits = c(-2, 7),
                                              barheight = 8,
                                              barwidth = 2,
                                              title.position = "top")) +
  ylim(unique(data$Parroquia)) +
  theme_light() +
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_text(size = 8),
        axis.text.x = element_text(angle = 90),
        legend.position = "right") + 
  scale_x_continuous(breaks = seq(1996, 2016, 1),
                     expand = c(0,0))

# Urbanization heatmap
data <- read.csv("data/land_use/urbanization/data.csv") %>%
  subset(Year > 1995 & Year < 2017) %>%
  dplyr::select(Year, Parroquia, Municipio,
                urban_increase_annual) %>%
  dplyr::rename(urbanization = urban_increase_annual)

# Sort data by highest API
cases <- read.csv("data/inla_input/data.csv") %>% dplyr::select(Year, Municipio, Parroquia, PF, PV, Population) %>%
  group_by(Year, Municipio, Parroquia) %>%
  dplyr::summarise(pf = sum(PF, na.rm = TRUE),
                   pv = sum(PV, na.rm = TRUE),
                   Population = mean(Population, na.rm = TRUE)) %>%
  dplyr::group_by(Municipio, Parroquia) %>%
  dplyr::summarise(pf = sum(pf, na.rm = TRUE),
                   pv = sum(pv, na.rm = TRUE),
                   Population = mean(Population, na.rm = TRUE)) %>%
  mutate(API_pf = pf * 1000/Population,
         API_pv = pv * 1000/Population) 

data <- merge(data, cases, by = c("Parroquia", "Municipio"), all = TRUE)

# Sort df
data <- data %>% dplyr::group_by(Year, Parroquia, Municipio) %>% 
  arrange(API_pv)

# Rename Dalla Costa parroquias (two municipalities)
data$Parroquia[data$Municipio == "Sifontes" & data$Parroquia == "Dalla Costa"] <- "Dalla Costa*"
data$Parroquia[data$Municipio == "Caroní" & data$Parroquia == "Dalla Costa"] <- "Dalla Costa†"

urbanization <- 
  ggplot(data, aes(Year, Parroquia)) + geom_tile(aes(fill = urbanization), 
                                                 colour = "white") +
  xlab("Time") + ylab(c(expression(paste("Increasing API") %->% paste("")))) +
  scale_fill_gradient(low = "#F1EDFE", high = "#39095D",
                      name = expression(atop("",
                                             atop(textstyle("Urbanization"),
                                                  atop(textstyle("(k"*m^2*" "*year^-1*")"))))),
                      guide = guide_colourbar(ticks = FALSE,
                                              limits = c(-2, 7),
                                              barheight = 8,
                                              barwidth = 2,
                                              title.position = "top")) +
  ylim(unique(data$Parroquia)) +
  theme_light() +
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.border = element_blank(),
        axis.ticks = element_blank(),
        axis.text.x = element_text(angle = 90),
        axis.text.y = element_text(size = 8),
        legend.position = "right") + 
  scale_x_continuous(breaks = seq(1996, 2016, 1),
                     expand = c(0,0))

ggpubr::ggarrange(forest_loss, urbanization, labels = c("A", "B"),
                  ncol = 1, nrow = 2,
                  font.label = list(size = 16))
ggsave("figures/supplementary/figS1", device = "tiff", width = 6, height = 10, units = "in", dpi = 700)

############################################################

## Fig. S2

############################################################
bolivar <- sf::st_read("data/ven_shp/Parroquias_Venezuela.shp") %>% subset(ESTADO == "Bolívar")

data <- merge(read.csv("data/inla_input/data.csv") %>%
                dplyr::select(Year, Month, Parroquia, Municipio, temp_lag0, prcp_lag0, nino34_lag0) %>%
                dplyr::group_by(Municipio, Parroquia) %>%
                # Calculate correlation between local climate conditions and Nino3.4 index
                mutate(cor_temp_p = cor.test(temp_lag0, nino34_lag0)$p.value,
                       cor_temp = cor.test(temp_lag0, nino34_lag0)$estimate,
                       cor_prcp_p = cor.test(prcp_lag0, nino34_lag0)$p.value,
                       cor_prcp = cor.test(prcp_lag0, nino34_lag0)$estimate) %>%
                dplyr::summarise(cor_temp_p = round(mean(cor_temp_p, na.rm = T),3),
                                 cor_temp = mean(cor_temp, na.rm = T),
                                 cor_prcp_p = round(mean(cor_prcp_p, na.rm = T),3),
                                 cor_prcp = mean(cor_prcp, na.rm = T)) %>%
                dplyr::rename(PARROQUIA = Parroquia,
                              MUNICIPIO = Municipio), 
              # Merge with shapefile
              bolivar, by = c("MUNICIPIO", "PARROQUIA")) %>% st_as_sf() 

# Plot 
temp_plot <- 
  data %>%
  ggplot() + geom_sf(aes(fill = cor_temp), size = 0.1,
                     colour = "transparent") +
  theme_void() +
  scale_fill_distiller(na.value = "grey60",
                       limits = c(-0.5, 0.5),
                       palette = "RdYlGn", 
                       direction = -1,
                       name = "Correlation",
                       guide = guide_colorbar(ticks = FALSE, barheight = 3,
                                              barwidth = 0.6)) +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 7))

prcp_plot <- data %>%
  ggplot() + geom_sf(aes(fill = cor_prcp), size = 0.1,
                     colour = "transparent") +
  theme_void() +
  scale_fill_distiller(na.value = "grey60",
                       limits = c(-0.25, 0.25),
                       breaks = seq(-0.25, 0.25, 0.1),
                       labels = comma,
                       palette = "BrBG", 
                       direction = 1,
                       name = "Correlation",
                       guide = guide_colorbar(ticks = FALSE, barheight = 3,
                                              barwidth = 0.6)) +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 7))

ggpubr::ggarrange(temp_plot, prcp_plot, labels = c("A", "B"),
                  ncol = 1, nrow = 2,
                  font.label = list(size = 16))
ggsave("figures/supplementary/figS2", device = "tiff", width = 5, height = 6, units = "in", dpi = 700)


############################################################

## Fig. S3

############################################################
venezuela <- rgdal::readOGR("data/ven_shp", "Parroquias_Venezuela") %>% subset(ESTADO != "Z. Reclamación")
bolivar <- subset(venezuela, venezuela$ESTADO == "Bolívar")

data <- read.csv("data/inla_input/data.csv") %>%
  subset(Month == 1 & Year == 2016) %>%
  dplyr::select(Parroquia, Municipio, total_mines) %>%
  dplyr::rename(mines = total_mines,
                PARROQUIA = Parroquia,
                MUNICIPIO = Municipio) %>% 
  tibble::remove_rownames() 

# Merge with shapefile
data_sp <- merge(bolivar, data, by = c("PARROQUIA", "MUNICIPIO")) %>% st_as_sf()

# Read in points data and select coordinates
pts <- rbind(read.csv("data/mining/mining_pts.csv") %>% dplyr::select(X, Y),
             read.csv("data/mining/mining_illegal_pts.csv") %>% dplyr::select(X, Y)) %>%
  drop_na()

# Convert to sp object
pts <- SpatialPoints(pts, proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
proj4string(venezuela) <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")

# Extract over Venezuela
extracted_points <- over(pts, venezuela)
extracted_points$X <- pts@coords[,1]
extracted_points$Y <- pts@coords[,2]

# Remove points not in polygons (NAs)
pts_in <- extracted_points[!is.na(extracted_points),]
pts_in <- pts_in %>% subset(ESTADO != "Z. Reclamación" | ESTADO != "NA")

# Shapefiles to plot
venezuela <- sf::st_read("data/ven_shp_0/VEN_adm0.shp")
venezuela_adm1 <- sf::st_read("data/ven_shp_0/VEN_adm1.shp")
bolivar_adm1  <- subset(venezuela_adm1, NAME_1 == "Bolívar")

# Mining categories
data <- read.csv("data/inla_input/data.csv") %>%
  subset(Month == 12 & Year == 2016) %>%
  dplyr::group_by(Parroquia, Municipio) %>%
  dplyr::mutate(total_mines = max(total_mines)) %>%
  dplyr::ungroup() %>%
  dplyr::select(Parroquia, Municipio, total_mines) %>%
  dplyr::rename(total_mines = total_mines,
                PARROQUIA = Parroquia,
                MUNICIPIO = Municipio) %>% 
  tibble::remove_rownames() 

data$mining_cat[data$total_mines <= 2] <- "low mining"
data$mining_cat[data$total_mines > 2] <- "high mining"
mining_categories <- merge(bolivar, data, by = c("PARROQUIA", "MUNICIPIO")) %>% st_as_sf() 

cols <- RColorBrewer::brewer.pal(11, "BrBG")

ggplot() + 
  geom_sf(data = st_as_sf(venezuela), fill = "transparent") +
  geom_sf(data = mining_categories, aes(fill = mining_cat), colour= "grey30", size = 0.1, alpha = 0.5) +
  geom_point(data = pts_in, aes(x=X,y=Y), colour = "red",
             size = 0.25, alpha = 1) +
  ylim(0,13) +
  theme_void() +
  scale_fill_manual(name = "",
                    values=c(cols[2], cols[10]))
ggsave(filename = "figures/supplementary/figS3", width = 6, height = 4, units = "in", dpi = 300, device = "tiff")

############################################################

## Fig. S4

############################################################

### Load models
files <- list.files("models/bym2/mods_w_nino/models_nonlinear", full.names = TRUE, pattern = "mod_w_mining_p")

df_w_mining <- NULL
for (i in files){
  
  load(i)
  
  if(grepl("pf", i)==TRUE){
    parasite <- "P. falciparum" 
  } else {
    parasite <- "P. vivax"
  }
  
  # Combine into df
  df_w_mining <- rbind(df_w_mining, 
                       mod$summary.random$s1[1:46,] %>%
                         mutate(Parasite = parasite,
                                Model    = "without mining") %>%
                         dplyr::rename(lci = `0.025quant`,
                                       uci = `0.975quant`) %>%
                         mutate(Parroquia = bolivar$PARROQUIA,
                                Municipio = bolivar$MUNICIPIO) %>%
                         dplyr::select(Parroquia, Municipio, mean, uci, lci, Parasite, Model))
}

files <- list.files("models/bym2/mods_w_nino/models_nonlinear", full.names = TRUE, pattern = "mod_p")

df_mining <- NULL
for (i in files){
  
  load(i)
  
  if(grepl("pf", i)==TRUE){
    parasite <- "P. falciparum" 
  } else {
    parasite <- "P. vivax"
  }
  
  # Combine into df
  df_mining <- rbind(df_mining, 
                     mod$summary.random$s1[1:46,] %>%
                       mutate(Parasite = parasite,
                              Model    = "with mining") %>%
                       dplyr::rename(lci = `0.025quant`,
                                     uci = `0.975quant`) %>%
                       mutate(Parroquia = bolivar$PARROQUIA,
                              Municipio = bolivar$MUNICIPIO) %>%
                       dplyr::select(Parroquia, Municipio, mean, uci, lci, Parasite, Model))
}

mining_df <- rbind(df_mining, df_w_mining)
mining_df$Parroquia <- as.character(mining_df$Parroquia)
mining_df$Parroquia[mining_df$Municipio == "Sifontes" & mining_df$Parroquia == "Dalla Costa"] <- "Dalla Costa*"
mining_df$Parroquia[mining_df$Municipio == "Caroní" & mining_df$Parroquia == "Dalla Costa"] <- "Dalla Costa†"

# Arrange by high mining
mining <- read.csv("data/inla_input/data.csv") %>% 
  subset(Year == 2016 & Month == 1) %>%
  dplyr::select(total_mines, Parroquia, Municipio) %>%
  dplyr::arrange(-total_mines) 

mining$Parroquia <- as.character(mining$Parroquia)
mining$Parroquia[mining$Municipio == "Sifontes" & mining$Parroquia == "Dalla Costa"] <- "Dalla Costa*"
mining$Parroquia[mining$Municipio == "Caroní" & mining$Parroquia == "Dalla Costa"] <- "Dalla Costa†"

data <- merge(mining_df, mining, by = c("Municipio", "Parroquia"), all = TRUE)

# Rename Dalla Costa parroquias (two municipalities)
data$Parroquia <- as.character(data$Parroquia)
data$Parroquia[data$Municipio == "Sifontes" & data$Parroquia == "Dalla Costa"] <- "Dalla Costa*"
data$Parroquia[data$Municipio == "Caroní" & data$Parroquia == "Dalla Costa"] <- "Dalla Costa†"

# Sort df by mining
data <- data %>% dplyr::group_by(Parroquia, Municipio) %>%
  arrange(-total_mines) 

cols <- RColorBrewer::brewer.pal(11, "BrBG")

## Plot
mining_models <- ggplot(data, aes(Parroquia)) + 
  geom_hline(yintercept = 0, linetype = "dashed", size = 0.1) +
  geom_linerange(aes(ymin = lci, ymax = uci, group = Model, colour = Model), size = 0.3, position = position_dodge(width = 0.5), alpha = 0.5) +
  geom_point(aes(Parroquia, mean, group = Model, colour = Model), position = position_dodge(width = 0.5), size = 0.3, alpha = 0.5) +
  theme_light() + 
  ylab("Marginal effect (log API)") + xlab("") +
  facet_wrap(~Parasite, scales = "fixed") +
  theme(strip.text = element_text(face = "italic", colour = "black", size = 6),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        strip.background = element_blank(),
        legend.position = c(1.15,0.6),
        legend.text = element_text(size = 5),
        legend.title = element_text(size = 6),
        legend.key.height =unit(0.3,"cm"),
        legend.key.width = unit(0.3,"cm"),
        legend.background = element_blank(),
        axis.text = element_text(size = 5),
        axis.title = element_text(size = 6),
        plot.margin = unit(c(0.2,1.8,0.2,0.2),"cm")) +
  scale_x_discrete(labels = wrap_format(10)) +
  xlim(rev(as.character(unique(data$Parroquia)))) +
  scale_fill_manual(values = c(cols[2], cols[10])) +
  scale_colour_manual(values = c(cols[2], cols[10])) +
  coord_flip()

annotate_figure(mining_models,
                left = text_grob(c(expression(paste("Increasing mining activity") %->% paste(""))), size = 5,
                                 hjust = 0.5, 
                                 rot = 90,
                                 vjust = 3.3)) 

ggsave("figures/supplementary/figS4", device = "tiff", width = 10, height = 10, units = "cm", dpi = 700)

############################################################

## Fig. S5

############################################################
# Load models
# Model estimates
load("models/bym2/mods_w_nino/models_linear/mod_pf.RData") 
mod_pf <- mod
load("models/bym2/mods_w_nino/models_linear/mod_pv.RData")
mod_pv <- mod

rbind(mod_pf$summary.fixed %>%
        dplyr::select(mean, `0.025quant`, `0.975quant`) %>%
        mutate(Parasite = "P. falciparum",
               Variable = rownames(mod_pf$summary.fixed)) %>%
        dplyr::slice(-1) %>% 
        dplyr::rename(lci = `0.025quant`,
                      uci = `0.975quant`),
      mod_pv$summary.fixed %>%
        dplyr::select(mean, `0.025quant`, `0.975quant`) %>%
        mutate(Parasite = "P. vivax",
               Variable = rownames(mod_pv$summary.fixed)) %>%
        dplyr::slice(-1) %>% 
        dplyr::rename(lci = `0.025quant`,
                      uci = `0.975quant`)) %>%
  mutate(Variable = recode(Variable, 
                           "temp" = "Temperature",
                           "prcp" = "Precipitation",
                           "forest_decrease" = "Deforestation",
                           "health_travel"   = "Healthcare inaccessibility",
                           "mines"           = "Mining",
                           "urbanization"    = "Urbanization",
                           "nino"            = "Niño 3.4")) %>%
  # Order
  mutate(Variable = factor(Variable, levels = c("Precipitation",
                                                "Temperature",
                                                "Urbanization",
                                                "Niño 3.4",
                                                "Healthcare inaccessibility",
                                                "Deforestation",
                                                "Mining"))) %>%
  ggplot(aes(Variable, colour = Parasite)) +
  geom_hline(yintercept = 0, linetype = "dashed", colour = "grey") +
  geom_linerange(aes(ymin = lci, ymax = uci), position = position_dodge(width = 0.3)) +
  geom_point(aes(x = Variable, y = mean), shape = 16, position = position_dodge(width = 0.3)) + 
  xlab("Model covariate") + ylab("Coefficient estimate") +
  scale_colour_manual(values = c("#571B57", "#B888B8")) +
  coord_flip() + 
  scale_y_continuous(name = "Estimate",
                     position = "right",
                     limits = c(-0.6, 1.8),
                     breaks = seq(-0.6, 1.8, 0.4),
                     labels = seq(-0.6, 1.8, 0.4),
                     expand = c(0,0)) +
  theme_classic() +
  theme(plot.margin = unit(c(0.2, 1, 0, 0.1),"cm"),
        legend.text = element_text(face = "italic"),
        legend.position = c(0.9, 0.2),
        legend.background = element_blank(),
        legend.key = element_blank(),
        legend.title = element_blank(),
        legend.key.height =unit(0.8,"cm"),
        legend.key.width = unit(0.8,"cm"),
        axis.line.y = element_blank(),
        axis.line.x = element_line(size = 0.2),
        axis.ticks.x = element_line(size = 0.2),
        axis.ticks.y = element_blank())  

ggsave("figures/supplementary/figS5", device = "tiff", width = 6, height = 3.5, units = "in", dpi = 700)

############################################################

## Fig. S6

############################################################
# Load models
files <- list.files("models/bym2/mods_w_nino/models_nonlinear", pattern = "w_interaction_p", full.names = TRUE)

data <- read.csv("data/inla_input/data.csv")

df <- NULL
for (i in files){
  load(i)
  if(grepl("pf", i)==TRUE){
    parasite <- "P. falciparum" 
  } else {
    parasite <- "P. vivax"
  }
  
  # Combine into df
  df <- rbind(df, 
              mod$summary.random$`inla.group(temp)` %>%
                mutate(Parasite = parasite,
                       Variable = "temperature") %>%
                dplyr::rename(lci = `0.025quant`,
                              uci = `0.975quant`) %>%
                dplyr::select(ID, mean, uci, lci, Parasite, Variable) %>%
                # Rescale 
                mutate(ID = ID*sd(data$temp_avg) + mean(data$temp_avg)),
              mod$summary.random$`inla.group(prcp)` %>%
                mutate(Parasite = parasite,
                       Variable = "precipitation") %>%
                dplyr::rename(lci = `0.025quant`,
                              uci = `0.975quant`) %>%
                dplyr::select(ID, mean, uci, lci, Parasite, Variable) %>%
                # Rescale 
                mutate(ID = ID*sd(data$prcp_avg) + mean(data$prcp_avg)))
  
  
}

cols <- RColorBrewer::brewer.pal(11, "Spectral")

# Plot
ggpubr::ggarrange(
  df %>% subset(Variable == "temperature") %>%
    ggplot() + 
    geom_hline(yintercept = 1, colour = "grey50", size = 0.3,
               linetype = "dashed") +
    geom_ribbon(aes(ymin=exp(uci), ymax=exp(lci), x=ID), fill = cols[2], alpha = 0.2) +
    geom_line(aes(x= ID, y=exp(mean)), colour = cols[2]) +
    theme_light() +
    xlab("Average temperature (°C)") + 
    ylab("Marginal effect\n(API)") +
    facet_grid(~Parasite, 
               scales = "fixed") +
    theme(legend.position = "none",
          plot.margin=unit(c(0.5, 0.5, 0.5, 0.5),"cm"),
          strip.text = element_text(face = "italic", colour = "grey20", size = 11),
          strip.background = element_blank(),
          panel.grid = element_blank()) +
    scale_x_continuous(breaks = seq(20, 30, 2),
                       labels = seq(20, 30, 2),
                       expand = c(0,0)),
  df %>% subset(Variable == "precipitation") %>%
    ggplot() + 
    geom_hline(yintercept = 1, colour = "grey50", size = 0.3,
               linetype = "dashed") +
    geom_ribbon(aes(ymin=exp(uci), ymax=exp(lci), x=ID), fill = cols[10], alpha = 0.2) +
    geom_line(aes(x= ID, y=exp(mean)), colour = cols[10]) +
    theme_light() +
    xlab("Average precipitation (mm/day)") + 
    ylab("Marginal effect\n(API)") +
    facet_grid(~Parasite, 
               scales = "fixed") +
    theme(legend.position = "none",
          plot.margin=unit(c(0.5, 0.5, 0.5, 0.5),"cm"),
          strip.text = element_text(face = "italic", colour = "grey20", size = 11),
          strip.background = element_blank(),
          panel.grid = element_blank()) +
    scale_x_continuous(breaks = seq(0, 18, 2),
                       labels = seq(0, 18, 2),
                       expand = c(0,0)),
  labels = c("A", "B"),
  ncol = 1, nrow = 2,
  font.label = list(size = 16))

ggsave(filename = "figures/supplementary/figS6", width = 5, height = 5, units = "in", dpi = 300, device = "tiff")

############################################################

## Fig. S7

############################################################
# Load models
files <- list.files("models/bym2/mods_w_nino/nino_lagged_models", pattern = "_p", full.names = TRUE)

# Get model estimates
lagged_models <- NULL
for (i in files){
  load(i)
  if(grepl("pf", i)==TRUE){
    parasite <- "P. falciparum"
    p <- "_pf"
  } else {
    parasite <- "P. vivax"
    p <- "_pv"
  }
  
  # Extract lag
  lag <- gsub(".*models/bym2/mods_w_nino/nino_lagged_models/\\s*|.RData.*", "", i)
  lag <- gsub(paste(p), "", lag)
  lag <- gsub("nino34_lag", "", lag)
  
  # Put into df
  df <- mod$summary.fixed %>%
    dplyr::select(mean, `0.025quant`, `0.975quant`) %>%
    mutate(Parasite = parasite,
           Lag      = lag,
           Variable = rownames(mod$summary.fixed)) %>%
    dplyr::slice(2) %>% 
    dplyr::rename(lci = `0.025quant`,
                  uci = `0.975quant`)
  lagged_models <- rbind(lagged_models, df) 
}

# Plot
lagged_models %>%
  mutate(Lag = as.factor(Lag)) %>%
  mutate(Lag = fct_relevel(Lag, as.character(0:18))) %>%
  ggplot(aes(Variable)) +
  geom_hline(yintercept = 0, linetype = "dashed", colour = "grey", size = 0.5) +
  geom_point(aes(x = Variable, y = mean, colour = Lag), shape = 16, position = position_dodge(width = 0.5)) +
  geom_linerange(aes(ymin = lci, ymax = uci, colour = Lag), position = position_dodge(width = 0.5)) +
  xlab("") + 
  facet_wrap(~Parasite, scales = "fixed") +
  coord_flip() + 
  scale_y_continuous(name = "Estimate",
                     expand = c(0,0)) +
  theme_light() +
  theme(plot.margin = unit(c(1,1,1,1),"cm"),
        axis.line.y = element_blank(),
        axis.ticks.y = element_blank(),
        strip.text = element_text(face = "italic", colour = "black"),
        strip.background = element_blank(),
        axis.text.y = element_blank()) 

ggsave(filename = "figures/supplementary/figS7", width = 8, height = 5, units = "in", dpi = 300, device = "tiff")

############################################################

## Fig. S8

############################################################

# Friction surface from MAP
friction <- malariaAtlas::getRaster(surface = "A global friction surface enumerating land-based travel speed for a nominal year 2015",
                                    shp = bolivar)

friction_spdf <- friction %>% as("SpatialPixelsDataFrame") %>% 
  as.data.frame() %>%
  dplyr::rename(speed = A.global.friction.surface.enumerating.land.based.travel.speed.for.a.nominal.year.2015)

# Plot
friction_map <- 
  ggplot() +  
  geom_sf(data=st_as_sf(bolivar), fill = "grey80", size = 0,
          colour = "transparent") +
  geom_tile(data=friction_spdf, aes(x=x, y=y, fill=speed)) +
  theme_void() +
  theme(legend.position = c(0.1, 0.2),
        legend.title.align = 0.5,
        legend.title = element_text(size = 11)) +
  scale_fill_viridis(name = "Land-based travel speed\n(minutes to travel one metre)",
                     option = "magma",
                     direction = -1,
                     guide = guide_colourbar(ticks = FALSE,
                                             barheight = 1.5,
                                             barwidth = 10,
                                             direction = "horizontal", 
                                             title.position = "top",
                                             frame.colour = "black",
                                             frame.linewidth = 1))

# Healthsites in Bolívar
healthsites <- read.csv("data/healthsites/venezuela_healthsites.csv") %>% 
  # remove NA
  subset(X != "NA" & Y != "NA") %>%
  dplyr::select(X, Y)

# Keep points only within shapefile bounds
names(healthsites) <- c("X", "Y")
coordinates(healthsites) <- ~X+Y
proj4string(healthsites) <- proj4string(bolivar)
pts_in <- over(healthsites, bolivar)
pts_in <- healthsites[!is.na(pts_in$PARROQUIA),] %>% as_data_frame() 
# Add variable to plot legend for sites
pts_in$ESTADO <- "BOLIVAR"

# Travel time
data <- read.csv("data/inla_input/data.csv") %>%
  # Subset as data are repeated for time
  subset(Month == 1 & Year == 2016) %>%
  dplyr::select(Parroquia, Municipio, health_travel_time) %>%
  dplyr::rename(PARROQUIA = Parroquia,
                MUNICIPIO = Municipio) %>%
  tibble::remove_rownames()

# Merge with shapefile
data_sp <- merge(bolivar, data, by = c("PARROQUIA", "MUNICIPIO")) %>% st_as_sf()

healthsites_map <- 
  data_sp %>% ggplot() + 
  geom_sf(aes(fill = health_travel_time), colour = "transparent") +
  geom_point(data = as_data_frame(pts_in), aes(x=X,y=Y, colour = ESTADO),
             size = 0.8, alpha = 1) +
  theme_void() +
  ylab("") + xlab("") +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        legend.background = element_blank(),
        legend.margin=unit(0.5, "cm"),
        legend.title = element_text(size = 11),
        legend.title.align = 0.1,
        legend.position = c(0.1, 0.2),
        legend.direction = "horizontal",
        plot.margin = unit(c(0.1, 0.1, 0.1, 0.1),"cm")) +
  guides(colour = guide_legend(order = 1, override.aes = list(size=2.5))) +
  scale_fill_gradient2(name = c(expression(paste("Increasing travel time") %->% paste(""))),
                       low = "#feeafa",
                       mid = "#efd3d7",
                       high = "#8e9aaf",
                       labels=function(x) format(x, big.mark = ",", scientific = FALSE),
                       guide = guide_colourbar(ticks = FALSE,
                                               barheight = 1.5,
                                               barwidth = 10,
                                               title.position = "top",
                                               frame.colour = "black",
                                               frame.linewidth = 1)) +
  scale_colour_manual(name = "Healthsites",
                      labels = c("", ""),
                      values = c("grey35", "transparent")) 

# Combine 
ggarrange(friction_map,
          healthsites_map,
          nrow = 2, ncol = 1,
          labels = c("A", "B"),
          font.label = list(size = 20))

ggsave("figures/supplementary/figS8", device = "tiff", width = 8, height = 10, units = "in", dpi = 300)

############################################################

## Fig. S9

############################################################

### Mining and deforestation 
# Read in data
data <- read.csv("data/inla_input/data.csv")

# Select data to plot
data <- data %>%
  # Select one timestep as mining data is repeated over time
  subset(Month == 1 & Year == 2016) %>%
  # Select variables to plot 
  dplyr::select(Parroquia, Municipio, total_mines, deforestation_lag0) %>%
  dplyr::rename(mines = total_mines,
                deforestation = deforestation_lag0,
                PARROQUIA = Parroquia,
                MUNICIPIO = Municipio) %>% 
  tibble::remove_rownames() 

# Merge with shapefile
data_sp <- merge(bolivar, data, by = c("PARROQUIA", "MUNICIPIO")) %>% st_as_sf()

# Create bins 
data_biscale <- bi_class(data_sp, x = deforestation, y = mines, style = "equal", dim =3)

# Plot map
map <- ggplot() +
  geom_sf(data = data_biscale, 
          mapping = aes(fill = bi_class), color = "transparent", 
          size = 0, show.legend = FALSE) +
  bi_scale_fill(pal = "DkViolet", dim = 3) +
  bi_theme() +
  theme(panel.background = element_rect(colour = "black", fill = NA, size=0.5))

# Create legend
legend <- bi_legend(pal = "DkViolet",
                    dim = 3,
                    xlab = "Higher deforestation ",
                    ylab = "Higher mining ",
                    size = 10)

# Combine 
mining_plot <- 
  ggdraw() +
  draw_plot(map, 0, 0, 1, 1) +
  draw_plot(legend, 0.18, 0.05, 0.2, 0.3)


### Urbanization and deforestation 
# Read in data
data <- read.csv("data/inla_input/data.csv")

# # Select data to plot
data <- data %>%
  # Select one timestep as data is repeated over months, and select maximum urbanization over the time period 
  subset(Month == 1 & Year == 2016) %>%
  # Select variables to plot
  dplyr::select(Parroquia, Municipio, urban_increase_cum, deforestation_lag0) %>%
  dplyr::rename(urbanization = urban_increase_cum,
                deforestation = deforestation_lag0,
                PARROQUIA = Parroquia,
                MUNICIPIO = Municipio) %>% 
  tibble::remove_rownames() 

# Merge with shapefile
data_sp <- merge(bolivar, data, by = c("PARROQUIA", "MUNICIPIO")) %>% st_as_sf()

# Create bins 
data_biscale <- bi_class(data_sp, x = deforestation, y = urbanization, style = "equal", dim = 3)

# Plot map
map <- ggplot() +
  geom_sf(data = data_biscale, 
          mapping = aes(fill = bi_class), color = "transparent", 
          size = 0, show.legend = FALSE) +
  bi_scale_fill(pal = "DkViolet", dim = 3) +
  bi_theme() +
  theme(panel.background = element_rect(colour = "black", fill = NA, size=0.5))

# Create legend
legend <- bi_legend(pal = "DkViolet",
                    dim = 3,
                    xlab = "Higher deforestation ",
                    ylab = "Higher\nurbanization ",
                    size = 10)

# Combine 
urbanization_plot <- 
  ggdraw() +
  draw_plot(map, 0, 0, 1, 1) +
  draw_plot(legend, 0.18, 0.05, 0.2, 0.3)

## Combine plots
p <- ggarrange(mining_plot,
               urbanization_plot,
               labels = c("A", "B"),
               font.label = list(size = 26),
               nrow = 2, ncol = 1)

ggsave(filename = "figures/supplementary/figS9", p, width = 8, height = 10, units = "in", dpi = 300, device = "tiff")

############################################################

## Table S1

############################################################

files <- list.files("models/bym2/mods_w_nino/models_linear", pattern = "mod_p", full.names = TRUE)
linear_models <- NULL
for (i in files){
  
  load(i)
  
  if(grepl("pf", i)==TRUE){
    parasite <- "P. falciparum" 
  } else {
    parasite <- "P. vivax"
  }
  
  # Combine into df
  linear_models <- rbind(linear_models, 
                         data.frame(Parasite = parasite,
                                    Model = "Linear",
                                    DIC   = mod$dic$dic,
                                    WAIC = mod$waic$waic))
}

files <- list.files("models/bym2/mods_w_nino/models_nonlinear", pattern = "mod_p", full.names = TRUE) 
nonlinear_models <- NULL
for (i in files){
  
  load(i)
  
  if(grepl("pf", i)==TRUE){
    parasite <- "P. falciparum" 
  } else {
    parasite <- "P. vivax"
  }
  
  # Combine into df
  nonlinear_models <- rbind(nonlinear_models, 
                            data.frame(Parasite = parasite,
                                       Model = "Non linear",
                                       DIC   = mod$dic$dic,
                                       WAIC = mod$waic$waic))
}
